services:
  client-react-prod:
    image: client-react:prod
    build:
      context: ./client-react
      dockerfile: Dockerfile
      target: production
    init: true
    depends_on:
      - api-node-prod
      - api-golang-prod
    networks:
      - frontend
    ports:
      - 80:8080

  api-node-prod:
    image: api-node:prod
    build:
      context: ./api-node
      dockerfile: Dockerfile
      target: production
    init: true
    environment:
      - DATABASE_URL=${DATABASE_PROD_URL}
    depends_on:
      - postgres-prod
    networks:
      - frontend
      - backend
    ports:
      - 3000:3000

  api-golang-prod:
    image: api-golang:prod
    build:
      context: ./api-golang
      dockerfile: Dockerfile
      target: production
    init: true
    environment:
      - DATABASE_URL=${DATABASE_PROD_URL}
    depends_on:
      - postgres-prod
    networks:
      - frontend
      - backend
    ports:
      - 8080:8080

  postgres-prod:
    image: postgres:15.1-alpine
    container_name: postgres-prod
    environment:
      POSTGRES_USER: ${POSTGRES_PROD_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PROD_PASSWORD}
      POSTGRES_DB: ${POSTGRES_PROD_DB}
    volumes:
      - pgdata_prod:/var/lib/postgresql/data
    networks:
      - backend

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge

volumes:
  pgdata_prod: